shader ShaderSubBase
{
	float varSubBase;
	
	stage float Compute()
	{
		return varSubBase;
	}
};

shader ShaderBase: ShaderSubBase
{
	float varBase;
	
	stage override float Compute()
	{
		return varBase;
	}
};

shader ShaderMain: ShaderBase
{
	compose ShaderCompose comp1;
	compose ShaderCompose comp2;
	
	float varMain;
	
	stage override float Compute()
	{
		return varMain;
	}
	
    void VSMain()
    {
		float f = Compute();
		f += comp1.ComputeComp();
		f += comp2.ComputeComp();
    }
};

shader ShaderMainX: ShaderMain
{
	float varMainX;
	
	stage override float Compute()
	{
		return varMainX;
	}
};



shader ShaderCompose: ShaderBase
{
	stage float varCompose;
	
	stage float ComputeComp()
	{
		return varCompose + Compute();
	}
};

shader ShaderComposeAX: ShaderCompose
{
	float varComposeAX;
	
	stage override float Compute()
	{
		return varComposeAX;
	}
};

shader ShaderComposeAY: ShaderComposeAX
{
	float varComposeAY;
	
	stage override float Compute()
	{
		return varComposeAY;
	}
};

shader ShaderComposeBX: ShaderCompose
{
	float varComposeBX;
	
	stage override float Compute()
	{
		return varComposeBX;
	}
};

shader ShaderComposeBY: ShaderComposeBX
{
	float varComposeBY;
	
	stage override float Compute()
	{
		return varComposeBY;
	}
};