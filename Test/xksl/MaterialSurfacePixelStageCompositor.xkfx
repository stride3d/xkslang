//Parse and compile shader from Xenko MaterialShader sample

//Activate some additionnal options with xkslang main test program
//============================================
setSampleTestOptions automaticallyTryToLoadAndConvertUnknownMixinShader true
setSampleTestOptions processSampleWithXkfxLibrary true
//============================================

addResourcesLibrary "library"

setDefine SILICON_STUDIO_RENDER_TARGET_COUNT "1"
setDefine SILICON_STUDIO_MULTISAMPLE_COUNT "1"

mixer m
m.mixin( MaterialSurfacePixelStageCompositor[
    directLightGroups = mixin(LightDirectionalGroup<8>),
    environmentLights = mixin(LightSimpleAmbient),
    materialPixelStage = mixin(MaterialSurfaceArray[
      layers = [
        mixin(MaterialSurfaceDiffuse[
          diffuseMap = mixin(ComputeColorTextureScaledOffsetDynamicSampler<Material.DiffuseMap,TEXCOORD0,Material.Sampler.i0,rgba,Material.TextureScale,Material.TextureOffset>)
        ]),
        mixin(MaterialSurfaceNormalMap<false,true>[
          normalMap = mixin(ComputeColorWaveNormal<5,0.1,-0.03>)
        ]),
        mixin(MaterialSurfaceGlossinessMap<false>[
          glossinessMap = mixin(ComputeColorConstantFloatLink<Material.GlossinessValue>)
        ]),
        mixin(MaterialSurfaceSetStreamFromComputeColor<matSpecular,rgb> [
          computeColorSource = mixin(ComputeColorConstantColorLink<Material.SpecularValue>)
        ]),
        mixin(MaterialSurfaceSetStreamFromComputeColor<matSpecularIntensity,r>[
          computeColorSource = mixin(ComputeColorConstantFloatLink<Material.SpecularIntensityValue>)
        ]),
        mixin(MaterialSurfaceLightingAndShading[
          surfaces = [
            mixin(MaterialSurfaceShadingDiffuseLambert<false>),
            mixin(MaterialSurfaceShadingSpecularMicrofacet[
              fresnelFunction = mixin(MaterialSpecularMicrofacetFresnelSchlick),
              geometricShadowingFunction = mixin(MaterialSpecularMicrofacetVisibilitySmithSchlickGGX),
              normalDistributionFunction = mixin(MaterialSpecularMicrofacetNormalDistributionGGX)
            ])
          ]
        ])
      ]
    ]),
    streamInitializerPixelStage = mixin(MaterialStream, MaterialDisplacementStream),
])

m.setStageEntryPoint( Vertex="VSMain", Pixel="PSMain" )
m.compile
