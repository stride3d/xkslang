shader TextureSample
{
	stage stream float2 TexCoord : TEXCOORD0;
	
	stage Texture2D Texture0;
	stage SamplerState Sampler0;
	
	stage SamplerState LinearSampler
    {
        Filter = MIN_MAG_MIP_LINEAR;
    };

    stage SamplerState LinearBorderSampler
    {
        Filter = MIN_MAG_MIP_LINEAR;
        AddressU = Border;
        AddressV = Border;
    };

    stage SamplerComparisonState LinearClampCompareLessEqualSampler
    {
        Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
        AddressU = Clamp;
        AddressV = Clamp;
        ComparisonFunc = LessEqual;
    };
	
	stage SamplerState AnisotropicSampler
    {
        Filter = ANISOTROPIC;
    };

    stage SamplerState AnisotropicRepeatSampler
    {
        Filter = ANISOTROPIC;
        AddressU = Wrap;
        AddressV = Wrap;
        MaxAnisotropy = 16;
    };

    stage SamplerState PointRepeatSampler
    {
        Filter = MIN_MAG_MIP_POINT;
        AddressU = Wrap;
        AddressV = Wrap;
    };

    stage SamplerState LinearRepeatSampler
    {
        Filter = MIN_MAG_MIP_LINEAR;
        AddressU = Wrap;
        AddressV = Wrap;
    };

    stage SamplerState RepeatSampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
    };
	
    float4 Shading()
    {
        float2 uv2 = streams.TexCoord.xy;
        float4 color = Texture0.Sample(Sampler0, uv2);
        
        return color;
    }
};
