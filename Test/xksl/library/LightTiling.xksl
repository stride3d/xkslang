// Copyright (c) 2011-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.

namespace SiliconStudio.Xenko.Rendering.Lights
{
    shader LightTiling : ComputeShaderBase
    {
        struct PointLight
        {
            float3 Position;
            float Radius;
        }



        // All point lights
        int PointLightCount;
        Buffer<float4> PointLights;

        // Light indices in this tile
        RWBuffer<uint> FilteredLightIndicesBuffer;

        groupshared float4 FrustumPlanes[4];

        groupshared uint FilteredLightIndicesCount;
        groupshared uint FilteredLightIndices[1024];

        override void Compute()
        {
            // Initialize variables and build frustum
            if (ThreadGroupIndex == 0)
            {
                FilteredLightIndicesCount = 0;
                //FrustumPlanes[0] = 
            }

            GroupMemoryBarrierWithGroupSync();

            // Loop over lights
            for (uint i = ThreadGroupIndex; i < PointLightCount; i += ThreadCountPerGroup)
            {
                PointLight pointLight = PointLights[i];

                // Check our point against frustum planes
                //if (dot(pointLight.Position, FrustumPlanes[j]) + pointLight.Radius > 0.0f)
                //    && dot(pointLight.Position, FrustumPlanes[j]) + pointLight.Radius > 0.0f)
                //    && dot(pointLight.Position, FrustumPlanes[j]) + pointLight.Radius > 0.0f)
                //    && dot(pointLight.Position, FrustumPlanes[j]) + pointLight.Radius > 0.0f))
                {
                    uint lightIndex;
                    InterlockedAdd(FilteredLightIndicesCount, 1, lightIndex);
                    FilteredLightIndices[lightIndex] = i;
                }
            }

            GroupMemoryBarrierWithGroupSync();

            // Copy results to buffer
            for (uint i = ThreadGroupIndex; i < FilteredLightIndicesCount; i += ThreadCountPerGroup)
            {
                FilteredLightIndicesBuffer[i] = FilteredLightIndices[i];
            }

            // Put sentinel value to mark last point light
            if (ThreadGroupIndex == 0)
            {
                FilteredLightIndicesBuffer[FilteredLightIndicesCount] = -1;
            }
        }
    }
}
