//Activate some additionnal options with xkslang main test program
//============================================
setSampleTestOptions automaticallyTryToLoadAndConvertUnknownMixinShader true
setSampleTestOptions processSampleWithXkfxLibrary true
//============================================

addResourcesLibrary "library"

//XenkoEditorForwardShadingEffect
setDefine SILICON_STUDIO_RENDER_TARGET_COUNT "1"
setDefine SILICON_STUDIO_MULTISAMPLE_COUNT "1"
setDefine SILICONSTUDIO_XENKO_GRAPHICS_API_DIRECT3D "1"
setDefine SILICONSTUDIO_XENKO_GRAPHICS_API_DIRECT3D11 "1"
setDefine SILICONSTUDIO_XENKO_GRAPHICS_PROFILE "45056"
setDefine GRAPHICS_PROFILE_LEVEL_9_1 "37120"
setDefine GRAPHICS_PROFILE_LEVEL_9_2 "37376"
setDefine GRAPHICS_PROFILE_LEVEL_9_3 "37632"
setDefine GRAPHICS_PROFILE_LEVEL_10_0 "40960"
setDefine GRAPHICS_PROFILE_LEVEL_10_1 "41216"
setDefine GRAPHICS_PROFILE_LEVEL_11_0 "45056"
setDefine GRAPHICS_PROFILE_LEVEL_11_1 "45312"
setDefine GRAPHICS_PROFILE_LEVEL_11_2 "45568"
mixer _m
_m.mixin( ShaderBase, ShadingBase, TransformationBase, NormalStream, TransformationWAndVP, NormalFromNormalMapping, MaterialSurfacePixelStageCompositor )

_m.addComposition( directLightGroups = [mixin({LightDirectionalGroup<1>, ShadowMapReceiverDirectional<4,1,true,true,false,false>, ShadowMapFilterPcf<PerView.Lighting,5>}), mixin(LightClusteredPointGroup), mixin(LightClusteredSpotGroup)] )
_m.addComposition( environmentLights = [mixin(LightSimpleAmbient), mixin(LightSkyboxShader[lightDiffuseColor=mixin(SphericalHarmonicsEnvironmentColor<3>), lightSpecularColor=mixin(RoughnessCubeMapEnvironmentColor)]), mixin(EnvironmentLight)] )
_m.addComposition( materialPixelStage = mixin(MaterialSurfaceArray[layers=[mixin(MaterialSurfaceDiffuse[diffuseMap=mixin(ComputeColorConstantColorLink<Material.DiffuseValue>)]), mixin(MaterialSurfaceNormalMap<true,true>[normalMap=mixin(ComputeColorTextureScaledOffsetDynamicSampler<Material.NormalMap,TEXCOORD0,Material.Sampler.i0,rgba,Material.TextureScale,Material.TextureOffset>)]), mixin(MaterialSurfaceGlossinessMap<false>[glossinessMap=mixin(ComputeColorConstantFloatLink<Material.GlossinessValue>)]), mixin(MaterialSurfaceSetStreamFromComputeColor<matSpecular,rgb>[computeColorSource=mixin(ComputeColorConstantColorLink<Material.SpecularValue>)]), mixin(MaterialSurfaceSetStreamFromComputeColor<matSpecularIntensity,r>[computeColorSource=mixin(ComputeColorConstantFloatLink<Material.SpecularIntensityValue>)]), mixin(MaterialSurfaceSetStreamFromComputeColor<matAmbientOcclusion,r>[computeColorSource=mixin(ComputeColorTextureScaledOffsetDynamicSampler<Material.AmbientOcclusionMap,TEXCOORD0,Material.Sampler.i0,r,Material.TextureScale.i1,Material.TextureOffset.i1>)]), mixin(MaterialSurfaceSetStreamFromComputeColor<matAmbientOcclusionDirectLightingFactor,r>[computeColorSource=mixin(ComputeColorConstantFloatLink<Material.AmbientOcclusionDirectLightingFactorValue>)]), mixin(MaterialSurfaceSetStreamFromComputeColor<matCavity,r>[computeColorSource=mixin(ComputeColorConstantFloatLink<Material.CavityValue>)]), mixin(MaterialSurfaceSetStreamFromComputeColor<matCavityDiffuse,r>[computeColorSource=mixin(ComputeColorConstantFloatLink<Material.CavityDiffuseValue>)]), mixin(MaterialSurfaceSetStreamFromComputeColor<matCavitySpecular,r>[computeColorSource=mixin(ComputeColorConstantFloatLink<Material.CavitySpecularValue>)]), mixin(MaterialSurfaceSetStreamFromComputeColor<matEmissive,rgba>[computeColorSource=mixin(ComputeColorMultiply[color1=mixin(ComputeColorTextureScaledOffsetDynamicSampler<Material.EmissiveMap,TEXCOORD0,Material.Sampler.i0,rgba,Material.TextureScale.i2,Material.TextureOffset.i2>), color2=mixin(ComputeColorConstantColorLink<Material.EmissiveValue>)])]), mixin(MaterialSurfaceSetStreamFromComputeColor<matEmissiveIntensity,r>[computeColorSource=mixin(ComputeColorConstantFloatLink<Material.EmissiveIntensity>)]), mixin(MaterialSurfaceLightingAndShading[surfaces=[mixin(MaterialSurfaceShadingDiffuseLambert<true>), mixin(MaterialSurfaceShadingSpecularMicrofacet[environmentFunction=mixin(MaterialSpecularMicrofacetEnvironmentGGXLUT), fresnelFunction=mixin(MaterialSpecularMicrofacetFresnelSchlick), geometricShadowingFunction=mixin(MaterialSpecularMicrofacetVisibilitySmithSchlickGGX), normalDistributionFunction=mixin(MaterialSpecularMicrofacetNormalDistributionGGX)])]]), mixin(MaterialSurfaceEmissiveShading<false>)]]) )
_m.addComposition( streamInitializerPixelStage = mixin({MaterialStream, MaterialPixelShadingStream}) )

_m.compile()
