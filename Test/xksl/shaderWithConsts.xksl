/****************************************************************************************
Parse variables assignment expression during declaration

//HLSL --> SPIRV: assignment test
int TOTO_01 = 6 + 10;   //uniform variable: ignore the assignment
static int TOTO_02 = 1 + 5 * 10;  //global variable: assignment to variable done through a function call
static const int TOTO_03 = 5 / 9 + 1;  //const variable: variable replaced by the const value

static const int TOTO_02 = sqrt(9);  //const value will be set at 0

static const int A0 = 5;
static const int A1 = A0 + 5;  //A1 const value = 10

static const int A2 = A3 + 5;  //A3 undefined yet: Error
static const int A3 = 5;

*****************************************************************************************/

shader ShaderSimple
{
	static const float3 colors[5] = { float3(0,1,0), float3(0,0,1), float3(1,0,1), float3(1,0,0), float3(1,1,1)};
	
	static const int toto = 55;
	
	float3 Compute()
	{
		return colors[1];
	}
};

/*
shader Math
{
	
	
    static const float PI = 3.14159265358979323846;
}

shader SphericalHarmonicsBase<int TOrder> : Math
{
	static const int CoefficientsCount = TOrder * TOrder;
	
	static const float PI4  =  4 * PI;
	static const float PI16 = 16 * PI;
	static const float PI64 = 64 * PI;        
	static const float SQRT_PI  = 1.77245385090551602729;
	
	static const float A0 = 1.0;
	static const float A1 = 2.0/3.0;
	static const float A2 = 1.0/4.0;
	static const float A3 = 0.0;
	static const float A4 = -1.0/24.0;
	static const float A[5*5] = 
	{ 
		A0, 
		A1, A1, A1, 
		A2, A2, A2, A2, A2,
		A3, A3, A3, A3, A3, A3, A3,
		A4, A4, A4, A4, A4, A4, A4, A4, A4
	};
}
*/

