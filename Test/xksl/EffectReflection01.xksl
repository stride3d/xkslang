/*
EffectReflection:
ConstantBuffers. Count=2
 Name="PerDraw" Size=208 MembersCount=5
  Name="ShaderMain_MatrixTransform" Offset=0. Class=MatrixColumns Type=Float Size=64 Alignment=16 Elements=0 Rows=4 Columns=4
  Name="ShaderMain_Matrix4_3" Offset=64. Class=MatrixColumns Type=Float Size=48 Alignment=16 Elements=0 Rows=4 Columns=3
  Name="ShaderMain_Matrix2_3" Offset=112. Class=MatrixColumns Type=Float Size=48 Alignment=16 Elements=0 Rows=2 Columns=3
  Name="ShaderMain_ColorMatrix" Offset=160. Class=Color Type=Float Size=12 Alignment=16 Elements=0 Rows=1 Columns=3
  Name="ShaderMain_ColorArray" Offset=176. Class=Color Type=Float Size=32 Alignment=16 Elements=2 Rows=1 Columns=4
 Name="globalCbuffer" Size=4 MembersCount=1
  Name="ShaderMain_depthOffset" Offset=0. Class=Scalar Type=Float Size=4 Alignment=4 Elements=0 Rows=1 Columns=1
ResourceBindings. Count=3
 Stage=Vertex Name="PerDraw" Class=ConstantBuffer Type=ConstantBuffer
 Stage=Vertex Name="globalCbuffer" Class=ConstantBuffer Type=ConstantBuffer
 Stage=Pixel Name="globalCbuffer" Class=ConstantBuffer Type=ConstantBuffer
*/

shader ShaderMain
{
	stage float depthOffset;
	stage float unusedVar;
	
	cbuffer PerDraw
    {
        stage float4x4 MatrixTransform;
		stage float4x3 Matrix4_3;
		stage float2x3 Matrix2_3;
		[Color]
        stage float3 ColorMatrix;
		[Color]
		stage float4 ColorArray[2];
    }
	
	cbuffer PerDraw
    {
        [Color]
        stage float3 ColorFront;
		stage float3 ColorBack;
        stage float ColorBlend;
    }
	
    stage stream float4 Position : POSITION;
	stage stream float4 ShadingPosition : SV_Position;
	stage stream float4 ColorTarget : SV_Target0;
	stage stream float Depth : SV_Depth;
	
	stage void VSMain() 
	{
		streams.ShadingPosition = mul(streams.Position, MatrixTransform) + float4(ColorArray[1].xyz, depthOffset);
	}
	
    stage void PSMain() 
    {
        streams.Depth = streams.ShadingPosition.w + depthOffset;
        streams.ColorTarget = float4(streams.ShadingPosition.x, streams.ShadingPosition.y, 1.0, depthOffset);
    }
};