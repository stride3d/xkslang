addResourcesLibrary "library"
set automaticallyTryToLoadAndConvertUnknownMixinShader true

setDefine SILICON_STUDIO_RENDER_TARGET_COUNT "1"
setDefine SILICON_STUDIO_MULTISAMPLE_COUNT "1"

mixer m
m.mixin(
  MaterialSurfaceArray[
    layers = [
	  mixin( MaterialSurfaceDiffuse[diffuseMap = mixin( ComputeColorTextureScaledOffsetDynamicSampler<Material.DiffuseMap,TEXCOORD0,Material.Sampler.i0,rgba,Material.TextureScale,Material.TextureOffset>)] ),
	  mixin( MaterialSurfaceNormalMap<false,true> [normalMap = mixin(ComputeColorWaveNormal<5,0.1,-0.03>)] ),
	  mixin( MaterialSurfaceGlossinessMap<false> [glossinessMap = mixin(ComputeColorConstantFloatLink<Material.GlossinessValue>)] ),
	  mixin( MaterialSurfaceSetStreamFromComputeColor<matSpecular,rgb> [computeColorSource = mixin(ComputeColorConstantColorLink<Material.SpecularValue>)] ),
	  mixin( MaterialSurfaceSetStreamFromComputeColor<matSpecularIntensity,r> [computeColorSource = mixin(ComputeColorConstantFloatLink<Material.SpecularIntensityValue>)] ),
	  mixin( MaterialSurfaceLightingAndShading [surfaces = [
	    mixin(MaterialSurfaceShadingDiffuseLambert<false>),
		mixin(MaterialSurfaceShadingSpecularMicrofacet [fresnelFunction = mixin(MaterialSpecularMicrofacetFresnelSchlick), geometricShadowingFunction = mixin(MaterialSpecularMicrofacetVisibilitySmithSchlickGGX), normalDistributionFunction = mixin(MaterialSpecularMicrofacetNormalDistributionGGX)])
      ]] )
	]
  ]
)

//m.setStageEntryPoint( Pixel="PSMain" )
//m.compile
break


{[directLightGroups, [mixin LightDirectionalGroup<8>]]}
{[environmentLights, [mixin LightSimpleAmbient]]}
{[materialPixelStage, mixin MaterialSurfaceArray
	[{layers = [
	mixin MaterialSurfaceDiffuse [{diffuseMap = ComputeColorTextureScaledOffsetDynamicSampler<Material.DiffuseMap,TEXCOORD0,Material.Sampler.i0,rgba,Material.TextureScale,Material.TextureOffset>}],
	mixin MaterialSurfaceNormalMap<false,true> [{normalMap = ComputeColorWaveNormal<5,0.1,-0.03>}],
	mixin MaterialSurfaceGlossinessMap<false> [{glossinessMap = ComputeColorConstantFloatLink<Material.GlossinessValue>}],
	mixin MaterialSurfaceSetStreamFromComputeColor<matSpecular,rgb> [{computeColorSource = ComputeColorConstantColorLink<Material.SpecularValue>}],
	mixin MaterialSurfaceSetStreamFromComputeColor<matSpecularIntensity,r> [{computeColorSource = ComputeColorConstantFloatLink<Material.SpecularIntensityValue>}],
	mixin MaterialSurfaceLightingAndShading [{surfaces = [MaterialSurfaceShadingDiffuseLambert<false>, mixin MaterialSurfaceShadingSpecularMicrofacet [{fresnelFunction = MaterialSpecularMicrofacetFresnelSchlick}, {geometricShadowingFunction = MaterialSpecularMicrofacetVisibilitySmithSchlickGGX}, {normalDistributionFunction = MaterialSpecularMicrofacetNormalDistributionGGX}]]}]
	]}]]}
{[materialVertexStage, mixin MaterialSurfaceArray [{layers = [mixin MaterialSurfaceSetStreamFromComputeColor<matDisplacement,r> [{computeColorSource = mixin ComputeColorMultiply [{color1 = ComputeColorWave<5,0.01,-0.03>}, {color2 = ComputeColorConstantFloatLink<Material.DisplacementValue>}]}], MaterialSurfaceDisplacement<Position,meshNormal,false>]}]]}
{[streamInitializerPixelStage, mixin MaterialStream, MaterialPixelShadingStream]}
{[streamInitializerVertexStage, mixin MaterialStream, MaterialDisplacementStream]}