
//PIXEL SHADER
struct PS_OUT
{
    float4 out_color : COLOR0;
	float2 out_f2 : F2;
};

struct PS_IN
{
    float4 in_fragCoord : VPOS;
};

PS_OUT main(PS_IN psin)
{
    PS_OUT output;
	output.out_f2 = 1;
    output.out_color = psin.in_fragCoord;
    return output;
}

//=========================================================================
//Glslang: HLSL --> SPV conversion
//D:\Prgms\glslang\source\Test\semantics.hlsl.frag -e main --keep-uncalled -D -V -H -o D:\Prgms\glslang\source\Test\semantics.hlsl.frag.spv

//SPV outputs
/*
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 48

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 34 41 45
                              ExecutionMode 4 OriginUpperLeft
                              Source HLSL 500
                              Name 4  "main"
                              Name 8  "PS_IN"
                              MemberName 8(PS_IN) 0  "in_fragCoord"
                              Name 11  "PS_OUT"
                              MemberName 11(PS_OUT) 0  "out_color"
                              MemberName 11(PS_OUT) 1  "out_f2"
                              Name 14  "@main(struct-PS_IN-vf41;"
                              Name 13  "psin"
                              Name 17  "output"
                              Name 32  "psin"
                              Name 34  "psin"
                              Name 36  "flattenTemp"
                              Name 37  "param"
                              Name 41  "out_color"
                              Name 45  "out_f2"
                              Decorate 34(psin) Location 0
                              Decorate 41(out_color) Location 0
                              Decorate 45(out_f2) Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
        8(PS_IN):             TypeStruct 7(fvec4)
               9:             TypePointer Function 8(PS_IN)
              10:             TypeVector 6(float) 2
      11(PS_OUT):             TypeStruct 7(fvec4) 10(fvec2)
              12:             TypeFunction 11(PS_OUT) 9(ptr)
              16:             TypePointer Function 11(PS_OUT)
              18:             TypeInt 32 1
              19:     18(int) Constant 1
              20:    6(float) Constant 1065353216
              21:   10(fvec2) ConstantComposite 20 20
              22:             TypePointer Function 10(fvec2)
              24:     18(int) Constant 0
              25:             TypePointer Function 7(fvec4)
              33:             TypePointer Input 8(PS_IN)
        34(psin):     33(ptr) Variable Input
              40:             TypePointer Output 7(fvec4)
   41(out_color):     40(ptr) Variable Output
              44:             TypePointer Output 10(fvec2)
      45(out_f2):     44(ptr) Variable Output
         4(main):           2 Function None 3
               5:             Label
        32(psin):      9(ptr) Variable Function
 36(flattenTemp):     16(ptr) Variable Function
       37(param):      9(ptr) Variable Function
              35:    8(PS_IN) Load 34(psin)
                              Store 32(psin) 35
              38:    8(PS_IN) Load 32(psin)
                              Store 37(param) 38
              39:  11(PS_OUT) FunctionCall 14(@main(struct-PS_IN-vf41;) 37(param)
                              Store 36(flattenTemp) 39
              42:     25(ptr) AccessChain 36(flattenTemp) 24
              43:    7(fvec4) Load 42
                              Store 41(out_color) 43
              46:     22(ptr) AccessChain 36(flattenTemp) 19
              47:   10(fvec2) Load 46
                              Store 45(out_f2) 47
                              Return
                              FunctionEnd
14(@main(struct-PS_IN-vf41;):  11(PS_OUT) Function None 12
        13(psin):      9(ptr) FunctionParameter
              15:             Label
      17(output):     16(ptr) Variable Function
              23:     22(ptr) AccessChain 17(output) 19
                              Store 23 21
              26:     25(ptr) AccessChain 13(psin) 24
              27:    7(fvec4) Load 26
              28:     25(ptr) AccessChain 17(output) 24
                              Store 28 27
              29:  11(PS_OUT) Load 17(output)
                              ReturnValue 29
                              FunctionEnd
*/

//=========================================================================
//SPIRV-Cross: SPV --> GLSL
//--output D:\Prgms\glslang\source\Test\xksl\outputs\semantics.hlsl.output.glsl D:\Prgms\glslang\source\Test\semantics.hlsl.frag.spv
/*
#version 450

struct PS_IN
{
    vec4 in_fragCoord;
};

struct PS_OUT
{
    vec4 out_color;
    vec2 out_f2;
};

layout(location = 0) in PS_IN psin;
layout(location = 0) out vec4 out_color;
layout(location = 1) out vec2 out_f2;

PS_OUT _main(PS_IN psin_1)
{
    PS_OUT _output;
    _output.out_f2 = vec2(1.0);
    _output.out_color = psin_1.in_fragCoord;
    return _output;
}

void main()
{
    PS_IN psin_1 = psin;
    PS_IN param = psin_1;
    PS_OUT flattenTemp = _main(param);
    out_color = flattenTemp.out_color;
    out_f2 = flattenTemp.out_f2;
}


*/

//=========================================================================
//SPIRV-Cross: SPV --> HLSL
//--hlsl --output D:\Prgms\glslang\source\Test\xksl\outputs\semantics.hlsl.output.hlsl D:\Prgms\glslang\source\Test\semantics.hlsl.frag.spv
/*
struct PS_IN
{
    float4 in_fragCoord;
};

struct PS_OUT
{
    float4 out_color;
    float2 out_f2;
};

static PS_IN psin;
static float4 out_color;
static float2 out_f2;

struct SPIRV_Cross_Input
{
    PS_IN psin : TEXCOORD0;
};

struct SPIRV_Cross_Output
{
    float4 out_color : COLOR0;
    float2 out_f2 : COLOR1;
};

PS_OUT _main(PS_IN psin_1)
{
    PS_OUT output;
    output.out_color = psin_1.in_fragCoord;
    return output;
}

void frag_main()
{
    PS_IN psin_1 = psin;
    PS_IN param = psin_1;
    PS_OUT flattenTemp = _main(param);
    out_color = flattenTemp.out_color;
    out_f2 = flattenTemp.out_f2;
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    psin = stage_input.psin;
    frag_main();
    SPIRV_Cross_Output stage_output;
    stage_output.out_color = out_color;
    stage_output.out_f2 = out_f2;
    return stage_output;
}

*/